[
  {
    "Q1": "Find the length of the longest substring without repeating characters.",
    "A1": "def lengthOfLongestSubstring(s):\n    seen = {}\n    l = 0\n    res = 0\n    for r, ch in enumerate(s):\n        if ch in seen and seen[ch] >= l:\n            l = seen[ch] + 1\n        seen[ch] = r\n        res = max(res, r - l + 1)\n    return res",
    "T1": [
      {"input": "abcabcbb", "output": 3},
      {"input": "bbbbb", "output": 1},
      {"input": "pwwkew", "output": 3},
      {"input": "dvdf", "output": 3},
      {"input": "", "output": 0}
    ]
  },
  {
    "Q2": "Find the maximum subarray sum (Kadaneâ€™s Algorithm).",
    "A2": "def maxSubArray(nums):\n    max_sum = nums[0]\n    cur_sum = nums[0]\n    for num in nums[1:]:\n        cur_sum = max(num, cur_sum + num)\n        max_sum = max(max_sum, cur_sum)\n    return max_sum",
    "T2": [
      {"input": "[-2,1,-3,4,-1,2,1,-5,4]", "output": 6},
      {"input": "[1]", "output": 1},
      {"input": "[5,4,-1,7,8]", "output": 23},
      {"input": "[-1,-2,-3]", "output": -1},
      {"input": "[2,-1,2,3,4,-5]", "output": 10}
    ]
  },
  {
    "Q3": "Given a rotated sorted array, find the minimum element.",
    "A3": "def findMin(nums):\n    l, r = 0, len(nums) - 1\n    while l < r:\n        mid = (l + r) // 2\n        if nums[mid] > nums[r]:\n            l = mid + 1\n        else:\n            r = mid\n    return nums[l]",
    "T3": [
      {"input": "[3,4,5,1,2]", "output": 1},
      {"input": "[4,5,6,7,0,1,2]", "output": 0},
      {"input": "[11,13,15,17]", "output": 11},
      {"input": "[2,1]", "output": 1},
      {"input": "[1]", "output": 1}
    ]
  },
  {
    "Q4": "Find the index of the first occurrence of a target in a sorted array (binary search).",
    "A4": "def firstOccurrence(nums, target):\n    l, r = 0, len(nums) - 1\n    ans = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if nums[mid] == target:\n            ans = mid\n            r = mid - 1\n        elif nums[mid] < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return ans",
    "T4": [
      {"input": "[5,7,7,8,8,10], target=8", "output": 3},
      {"input": "[5,7,7,8,8,10], target=6", "output": -1},
      {"input": "[1,2,3,3,3,4], target=3", "output": 2},
      {"input": "[1], target=1", "output": 0},
      {"input": "[1,1,1,1], target=1", "output": 0}
    ]
  },
  {
    "Q5": "Check if a linked list has a cycle (Floydâ€™s cycle detection).",
    "A5": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef hasCycle(head):\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False",
    "T5": [
      {"input": "1->2->3->2 (cycle)", "output": true},
      {"input": "1->2->3->4 (no cycle)", "output": false},
      {"input": "single node, no cycle", "output": false},
      {"input": "single node pointing to itself", "output": true},
      {"input": "2 nodes, 2->1->2 (cycle)", "output": true}
    ]
  },
  {
    "Q6": "Find the majority element (> n/2 times) using Boyer-Moore Voting.",
    "A6": "def majorityElement(nums):\n    count, candidate = 0, None\n    for num in nums:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate",
    "T6": [
      {"input": "[3,2,3]", "output": 3},
      {"input": "[2,2,1,1,1,2,2]", "output": 2},
      {"input": "[1]", "output": 1},
      {"input": "[1,1,2]", "output": 1},
      {"input": "[4,4,4,5,5]", "output": 4}
    ]
  },
  {
    "Q7": "Find the minimum window substring containing all characters of t in s.",
    "A7": "from collections import Counter\n\ndef minWindow(s, t):\n    if not t or not s:\n        return \"\"\n    need = Counter(t)\n    missing = len(t)\n    l = start = end = 0\n    for r, ch in enumerate(s, 1):\n        if need[ch] > 0:\n            missing -= 1\n        need[ch] -= 1\n        if missing == 0:\n            while l < r and need[s[l]] < 0:\n                need[s[l]] += 1\n                l += 1\n            if end == 0 or r - l <= end - start:\n                start, end = l, r\n    return s[start:end]",
    "T7": [
      {"input": "s='ADOBECODEBANC', t='ABC'", "output": "BANC"},
      {"input": "s='a', t='a'", "output": "a"},
      {"input": "s='a', t='aa'", "output": ""},
      {"input": "s='aa', t='aa'", "output": "aa"},
      {"input": "s='ab', t='b'", "output": "b"}
    ]
  },
  {
    "Q8": "Merge overlapping intervals.",
    "A8": "def merge(intervals):\n    intervals.sort(key=lambda x: x[0])\n    merged = []\n    for interval in intervals:\n        if not merged or merged[-1][1] < interval[0]:\n            merged.append(interval)\n        else:\n            merged[-1][1] = max(merged[-1][1], interval[1])\n    return merged",
    "T8": [
      {"input": "[[1,3],[2,6],[8,10],[15,18]]", "output": "[[1,6],[8,10],[15,18]]"},
      {"input": "[[1,4],[4,5]]", "output": "[[1,5]]"},
      {"input": "[[1,10],[2,6],[8,9]]", "output": "[[1,10]]"},
      {"input": "[[1,2],[3,4]]", "output": "[[1,2],[3,4]]"},
      {"input": "[[1,4],[0,4]]", "output": "[[0,4]]"}
    ]
  },
  {
    "Q9": "Find the kth smallest element in a BST.",
    "A9": "def kthSmallest(root, k):\n    stack = []\n    while True:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        k -= 1\n        if k == 0:\n            return root.val\n        root = root.right",
    "T9": [
      {"input": "BST=[3,1,4,null,2], k=1", "output": 1},
      {"input": "BST=[5,3,6,2,4,null,null,1], k=3", "output": 3},
      {"input": "BST=[2,1,3], k=2", "output": 2},
      {"input": "BST=[1,null,2], k=2", "output": 2},
      {"input": "BST=[3,1,4], k=2", "output": 3}
    ]
  },
  {
    "Q10": "Find the number of islands in a binary grid.",
    "A10": "def numIslands(grid):\n    if not grid:\n        return 0\n    rows, cols = len(grid), len(grid[0])\n    def dfs(r, c):\n        if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != '1':\n            return\n        grid[r][c] = '0'\n        dfs(r+1,c); dfs(r-1,c); dfs(r,c+1); dfs(r,c-1)\n    count = 0\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == '1':\n                count += 1\n                dfs(r,c)\n    return count",
    "T10": [
      {"input": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]", "output": 1},
      {"input": "[[\"1\",\"0\",\"1\",\"0\"]]", "output": 2},
      {"input": "[[\"1\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"1\"],[\"0\",\"0\",\"1\",\"1\"]]", "output": 3},
      {"input": "[[\"0\"]]", "output": 0},
      {"input": "[[\"1\"]]", "output": 1}
    ]
  }
]
